

-----------language-cpp-----------------
class Solution {
public:

    int hIndexBruteForce(vector<int>& c) {
        sort(c.begin(), c.end());
        int n = c.size();
        int maxi = 0;
        for(int i = 0; i < n; i++) {
            if(c[i] >= n - i) {
                maxi = max(maxi, n - i);
            }
        }
        return maxi;
    }

    int hIndex(vector<int>& citations) {
        return hIndexBruteForce(citations);
    }
};
class Solution
{
public:
    int hIndex(vector<int> &citations)
    {
        sort(citations.begin(), citations.end());
        int n = citations.size();
        int start = 0, end = n - 1;
        int ans = 0;
        while (start <= end)
        {
            int mid = start + (end - start) / 2;
            if (citations[mid] >= n - mid)
            {
                ans = max(ans, n - mid);
                end = mid - 1;
            }
            else
            {
                start = mid + 1;
            }
        }
        return ans;
    }
};


-----------language-cpp-----------------
class Solution {
public:
    int arrayPairSum(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        int sum = 0;
        for(int i=0; i<nums.size(); i+=2) {
            sum += nums[i];
        }
        return sum;
    }
};


-----------language-python-----------------
class Solution:
    def arrayPairSum(self, nums: List[int]) -> int:
        nums.sort()
        ans = 0
        for i in range(0, len(nums), 2):
            ans += nums[i]
        return ans


-----------language-python-----------------
class Solution:
    def sortArray(self, nums: List[int]) -> List[int]:
        def merge(low, mid, high):
            res = [0] * (high - low + 1)
            i = low
            j = mid + 1
            k = 0
            while i <= mid and j <= high:
                if nums[i] <= nums[j]:
                    res[k] = nums[i]
                    i += 1
                    k += 1
                else:
                    res[k] = nums[j]
                    j += 1
                    k += 1
            while i <= mid:
                res[k] = nums[i]
                i += 1
                k += 1
            while j <= high:
                res[k] = nums[j]
                j += 1
                k += 1
            for x in range(len(res)):
                nums[low + x] = res[x]
        def mergeSort(low, high):
            if low < high:
                mid = low + (high - low) // 2
                mergeSort(low, mid)
                mergeSort(mid + 1, high)
                merge(low, mid, high)
        mergeSort(0, len(nums) - 1)
        return nums


-----------language-cpp-----------------
class Solution {
public:
    void merge(vector<int> &arr, int low, int mid, int high) {
        vector<int> res(high - low + 1);
        int i = low, j = mid + 1, k = 0;
        while(i <= mid && j <= high) {
            if(arr[i] <= arr[j]) res[k++] = arr[i++];
            else res[k++] = arr[j++];
        }
        while(i <= mid) res[k++] = arr[i++];
        while(j <= high) res[k++] = arr[j++];
        for(int x = 0; x < res.size(); x++) {
            arr[low + x] = res[x];
        }
    }

    void mergeSort(vector<int> &arr, int low, int high) {
        if(low < high) {
            int mid = low + (high - low) / 2;
            mergeSort(arr, low, mid);
            mergeSort(arr, mid + 1, high);
            merge(arr, low, mid, high);
        }
    }

    vector<int> sortArray(vector<int>& nums) {
        mergeSort(nums, 0, nums.size() - 1);
        return nums;
    }
};


-----------language-java-----------------


-----------language-java-----------------
